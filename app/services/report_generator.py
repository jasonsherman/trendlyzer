"""
Service for generating PDF reports with charts.
"""
import os
import matplotlib
matplotlib.use('Agg')  # Set the backend to non-interactive 'Agg'
import matplotlib.pyplot as plt
from fpdf import FPDF
from fpdf.enums import XPos, YPos
from wordcloud import WordCloud
from typing import List, Dict, Tuple
import logging
from ..models.report_metrics import ReportMetrics
from ..config.config import REPORT_CONFIG, REPORTS_FOLDER
from ..utils.text_processing import get_word_frequencies, get_summary

logger = logging.getLogger(__name__)

class ReportGenerator:
    """Class responsible for generating PDF reports with charts."""

    def __init__(self, filename: str, company_name: str):
        """Initialize the report generator."""
        self.filename = filename
        self.company_name = company_name
        self.pdf = FPDF()
        self._setup_fonts()

    def _setup_fonts(self):
        """Register fonts for the PDF."""
        self.pdf.add_font(
            REPORT_CONFIG['font']['name'],
            '',
            REPORT_CONFIG['font']['regular'],
            uni=True
        )
        self.pdf.add_font(
            REPORT_CONFIG['font']['name'],
            'B',
            REPORT_CONFIG['font']['bold'],
            uni=True
        )
        self.pdf.add_font(
            REPORT_CONFIG['font']['name'],
            'I',
            REPORT_CONFIG['font']['italic'],
            uni=True
        )

    def _add_header(self):
        """Add header section to the report."""
        self.pdf.add_page()
        logo_path = 'static/images/trendlyzer-report-logo.png'

        if os.path.exists(logo_path):
            self.pdf.image(logo_path, x=80, y=10, w=50)
            self.pdf.ln(30)
        else:
            self.pdf.ln(20)

        self.pdf.set_font(REPORT_CONFIG['font']['name'], "B", 16)
        self.pdf.cell(
            0, 7, "Trend Analyzer & Insights Report",
            new_x=XPos.LMARGIN, new_y=YPos.NEXT, align='C'
        )

    def _create_chart(self, data: Dict[str, float], title: str, filename: str) -> str:
        """Create a bar chart and save it."""
        plt.figure(figsize=REPORT_CONFIG['charts']['default_size'])
        plt.bar(data.keys(), data.values(),
                color=REPORT_CONFIG['charts']['bar_color'])
        plt.title(title)
        plt.ylabel('Percentage (%)')
        plt.ylim(0, REPORT_CONFIG['charts']['max_percentage'])
        plt.xticks(rotation=20, ha='right')
        plt.tight_layout()

        chart_path = os.path.join(REPORTS_FOLDER, filename)
        os.makedirs(os.path.dirname(chart_path), exist_ok=True)
        plt.savefig(chart_path)
        plt.close()

        return chart_path

    def _add_section(self, title: str, content: str):
        """Add a section to the report."""
        self.pdf.set_font(REPORT_CONFIG['font']['name'], "B", 14)
        self.pdf.set_text_color(*REPORT_CONFIG['colors']['primary'])
        self.pdf.cell(0, 7, title, new_x=XPos.LMARGIN, new_y=YPos.NEXT)
        self.pdf.set_text_color(0, 0, 0)
        self.pdf.set_font(REPORT_CONFIG['font']['name'], "", 12)
        self.pdf.multi_cell(0, 7, content)
        self.pdf.ln(8)

    def _add_wordcloud(self, text: str):
        """Add word cloud to the report."""
        wc_path = os.path.join(
            REPORTS_FOLDER, f"{os.path.basename(self.filename).replace('.txt', '')}_wordcloud.png")
        wc = WordCloud(width=800, height=400, background_color='white').generate(text)
        wc.to_file(wc_path)
        self.pdf.image(wc_path, w=110)
        self.pdf.ln(10)

    def _add_footer(self):
        """Add footer to the report."""
        self.pdf.set_y(self.pdf.get_y() + 5)
        self.pdf.set_font(REPORT_CONFIG['font']['name'], 'I', 8)
        self.pdf.cell(
            0, 10, 'Generated by Trendlyzer | VengoAI.com', 0, 1, 'C')

    def generate(
        self,
        mode: str,
        metrics: ReportMetrics,
        top_keywords: List[Tuple[str, int]],
        theme_counts: Dict[str, int],
        conversations: List[str],
        full_text: str
    ) -> Tuple[str, str]:
        """Generate the complete report."""
        try:
            self._add_header()
            
            if mode == "Conversational Document":
                self._generate_conversational_report(metrics, top_keywords, theme_counts, conversations)
            else:
                self._generate_normal_report(metrics, top_keywords, theme_counts, full_text)

            if not os.path.exists(REPORTS_FOLDER):
                os.makedirs(REPORTS_FOLDER)
                
            report_filename = f"{os.path.basename(self.filename).replace('.txt', '')}_report.pdf"
            report_path = os.path.join(REPORTS_FOLDER, report_filename)
            self.pdf.output(report_path)
            web_report_path = f"/static/reports/{report_filename}"
            
            overview = self._generate_overview(metrics, theme_counts)
            return web_report_path, overview
            
        except Exception as e:
            logger.error(f"Error generating report: {e}")
            raise

    def _generate_conversational_report(self, metrics: ReportMetrics, top_keywords: List[Tuple[str, int]], 
                                     theme_counts: Dict[str, int], conversations: List[str]):
        """Generate report for conversational documents."""
        # Overview section
        overview = (
            f"This report was created for {self.company_name} as a conversational document containing approximately "
            f"{metrics.word_count:,} words and {metrics.line_count:,} lines. The analysis identified top themes like {', '.join(list(theme_counts.keys())[:3])}."
        )
        self._add_section("Overview", overview)

        # Key Highlights
        highlights = (
            f"- Total Conversations Analyzed: {metrics.total_conversations}\n"
            f"- Email Leads Collected: {metrics.email_conversion_rate:.2f}%\n"
            f"- Phone Numbers Collected: {metrics.phone_conversion_rate:.2f}%"
        )
        self._add_section("Key Highlights", highlights)

        # Lead Capture Rates Chart
        chart_data = {
            'Email Leads': metrics.email_conversion_rate,
            'Phone Numbers': metrics.phone_conversion_rate
        }
        chart_path = self._create_chart(
            chart_data,
            'Lead Capture Rates',
            f"{os.path.basename(self.filename).replace('.txt', '')}_lead_capture.png"
        )
        self.pdf.image(chart_path, w=110)
        self.pdf.ln(10)

        # Top 3 Lead Capture Metrics
        lead_metrics = (
            f"- {metrics.email_conversion_rate:.2f}% of customers provided an email after chatting\n"
            f"- {metrics.phone_conversion_rate:.2f}% of customers provided a phone number\n"
            f"- Over {metrics.follow_up_rate:.0f}% of all conversations led to actionable follow-ups"
        )
        self._add_section("Top 3 Lead Capture Metrics", lead_metrics)

        # Top Lead Capture Metrics Chart
        lead_chart_data = {
            'Email Provided': metrics.email_conversion_rate,
            'Phone Provided': metrics.phone_conversion_rate,
            'Follow-Ups': metrics.follow_up_rate
        }
        lead_chart_path = self._create_chart(
            lead_chart_data,
            'Top Lead Capture Metrics',
            f"{os.path.basename(self.filename).replace('.txt', '')}_top_lead_metrics.png"
        )
        self.pdf.image(lead_chart_path, w=110)
        self.pdf.ln(10)

        # Top Keywords and Conversation Drivers
        drivers_intro = (
            "Analyzing word frequency provides insight into what customers care about most. "
            "These keywords reveal user intents, buying readiness, and support needs."
        )
        self._add_section("Top Keywords and Conversation Drivers", drivers_intro)
        for kw, count in top_keywords:
            self.pdf.cell(
                0, 7, f"- {kw} ({count} mentions)", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
        self.pdf.ln(8)

        # Trends & Impact on Businesses
        trends = (
            "- Higher Lead Volume: Businesses using AI agents are collecting contact information in ~78% of conversations, significantly above the industry average.\n"
            "- Customer Readiness: Nearly half of conversations involved direct requests to speak to a human or book services, showing strong buying intent.\n"
            "- Trust Signals Matter: Many customers questioned whether the AI agent was real or human, highlighting the need for credibility-building in conversations."
        )
        self._add_section("Trends & Impact on Businesses", trends)

        # Visual Insights Chart
        vis_chart_data = {
            'Lead Capture Success': metrics.lead_success_rate,
            'Customer Readiness': metrics.readiness_rate,
            'Trust Concerns': metrics.trust_rate
        }
        vis_chart_path = self._create_chart(
            vis_chart_data,
            'Business Trends Observed',
            f"{os.path.basename(self.filename).replace('.txt', '')}_trends_impact.png"
        )
        self.pdf.image(vis_chart_path, w=110)
        self.pdf.ln(10)

        # Common Themes in Conversations
        common_themes = [
            "Request Service Information: Detailed questions about services, pricing, timelines, and processes.",
            "Initiate Sales Inquiries: Many customers express interest in purchasing or getting started.",
            "Seek Customer Support: Some customers come with support-related questions, often post-sale.",
            "Schedule Appointments or Demos: Agents were frequently asked how to book consultations or services.",
            "Verify Business Credibility: Visitors often ask if the company is real, legitimate, or human-operated.",
            "Location and Availability: Customers ask where the business operates or if service is available in their area."
        ]
        self._add_section("Common Themes in Conversations", "\n".join(f"- {t}" for t in common_themes))

        # Sales Insights & Strategies
        sales_insights = [
            "AI agents are effectively pre-qualifying leads by gathering needs, budget information, and location details.",
            "Teams can intervene only when necessary, saving significant time and resources while maintaining engagement quality.",
            "Businesses can leverage the data gathered during chats to personalize follow-up outreach and improve closing rates."
        ]
        self._add_section("Sales Insights & Strategies", "\n".join(f"- {s}" for s in sales_insights))

        # Recommendations
        recommendations = [
            "Add clear Call-to-Actions (CTAs) to AI flows (e.g., 'Would you like a team member to reach out?') to increase lead capture rates.",
            "Personalize follow-up emails using data collected during AI conversations for higher engagement.",
            "Refine agent scripts by focusing on top keywords and conversation intents to streamline answers and boost customer trust."
        ]
        self._add_section("Recommendations", "\n".join(f"- {r}" for r in recommendations))

        self._add_footer()

    def _generate_normal_report(self, metrics: ReportMetrics, top_keywords: List[Tuple[str, int]], 
                              theme_counts: Dict[str, int], full_text: str):
        """Generate report for normal documents."""
        # Overview section
        overview = (
            f"This report was created for {self.company_name} as a business document containing approximately "
            f"{metrics.word_count:,} words and {metrics.line_count:,} lines. The analysis identified top themes like {', '.join(list(theme_counts.keys())[:3])}."
        )
        self._add_section("Overview", overview)

        # Document Highlights
        highlights = (
            f"- Total Lines: {metrics.line_count}\n"
            f"- Total Words: {metrics.word_count}"
        )
        self._add_section("Document Highlights", highlights)

        # Summary
        summary = get_summary(full_text)
        self._add_section("Summary", summary)

        # Word frequency bar chart
        word_freqs = get_word_frequencies(full_text, top_n=10)
        self._add_bar_chart(word_freqs)

        # Word cloud
        self._add_wordcloud(full_text)

        # Top Keywords
        self._add_section("Top Keywords", "")
        for kw, count in top_keywords:
            self.pdf.cell(
                0, 7, f"- {kw} ({count} mentions)", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
        self.pdf.ln(8)

        # Detected Themes
        self._add_section("Detected Themes", "")
        for theme, count in theme_counts.items():
            self.pdf.cell(
                0, 7, f"- {theme} ({count} mentions)", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
        self.pdf.ln(8)

        # Recommendations
        recommendations = [
            "Add clear Call-to-Actions (CTAs) to business flows to increase engagement.",
            "Personalize follow-up emails using data collected during business interactions for higher engagement.",
            "Refine business documents by focusing on top keywords and intents to streamline communication and boost trust."
        ]
        self._add_section("Recommendations", "\n".join(f"- {r}" for r in recommendations))

        self._add_footer()

    def _add_bar_chart(self, word_freqs: list):
        """Add bar chart of word frequencies to the report."""
        words, counts = zip(*word_freqs) if word_freqs else ([], [])
        plt.figure(figsize=(6, 3))
        plt.bar(words, counts, color=REPORT_CONFIG['charts']['bar_color'])
        plt.title('Top Words')
        plt.ylabel('Frequency')
        plt.xticks(rotation=20, ha='right')
        plt.tight_layout()
        chart_path = os.path.join(
            REPORTS_FOLDER, f"{os.path.basename(self.filename).replace('.txt', '')}_topwords.png")
        os.makedirs(os.path.dirname(chart_path), exist_ok=True)
        plt.savefig(chart_path)
        plt.close()
        self.pdf.image(chart_path, w=110)
        self.pdf.ln(10)

    def _generate_overview(self, metrics, theme_counts):
        """Generate overview text for the report."""
        return (
            f"This report was created for {self.company_name} as a {metrics.mode.lower()} containing approximately "
            f"{metrics.word_count:,} words and {metrics.line_count:,} lines. "
            f"The analysis identified top themes like {', '.join(list(theme_counts.keys())[:3])}."
        ) 